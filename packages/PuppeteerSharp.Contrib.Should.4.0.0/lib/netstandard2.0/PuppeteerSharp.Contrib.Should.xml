<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PuppeteerSharp.Contrib.Should</name>
    </assembly>
    <members>
        <member name="T:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions">
            <summary>
            Should assertions for <see cref="T:PuppeteerSharp.ElementHandle"/>.
            </summary>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldExist(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element exists.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>The <see cref="T:PuppeteerSharp.ElementHandle"/> for method chaining</returns>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldNotExist(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element does not exist.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>The <see cref="T:PuppeteerSharp.ElementHandle"/> for method chaining</returns>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldHaveValueAsync(PuppeteerSharp.ElementHandle,System.String,System.String)">
            <summary>
            Asserts that the element has the specified value.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="value">The value</param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks><![CDATA[Elements: <button>, <option>, <input>, <li>, <meter>, <progress>, <param>]]></remarks>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldNotHaveValueAsync(PuppeteerSharp.ElementHandle,System.String,System.String)">
            <summary>
            Asserts that the element does not have the specified value.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="value">The value</param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks><![CDATA[Elements: <button>, <option>, <input>, <li>, <meter>, <progress>, <param>]]></remarks>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldHaveAttributeAsync(PuppeteerSharp.ElementHandle,System.String,System.String)">
            <summary>
            Asserts that the element has the specified attribute.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="name">The attribute name</param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldNotHaveAttributeAsync(PuppeteerSharp.ElementHandle,System.String,System.String)">
            <summary>
            Asserts that the element does not have the specified attribute.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="name">The attribute name</param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldHaveContentAsync(PuppeteerSharp.ElementHandle,System.String,System.String,System.String)">
            <summary>
            Asserts that the element has the specified content.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="regex">A regular expression to test against <c>element.textContent</c></param>
            <param name="flags">A set of flags for the regular expression</param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"/>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldNotHaveContentAsync(PuppeteerSharp.ElementHandle,System.String,System.String,System.String)">
            <summary>
            Asserts that the element does not have the specified content.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="regex">A regular expression to test against <c>element.textContent</c></param>
            <param name="flags">A set of flags for the regular expression</param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"/>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldHaveClassAsync(PuppeteerSharp.ElementHandle,System.String,System.String)">
            <summary>
            Asserts that the element has the specified class.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="className">The class name</param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldNotHaveClassAsync(PuppeteerSharp.ElementHandle,System.String,System.String)">
            <summary>
            Asserts that the element does not have the specified class.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="className">The class name</param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldBeVisibleAsync(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element is visible.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldBeHiddenAsync(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element is hidden.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldBeSelectedAsync(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element is selected.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks><![CDATA[Elements: <option>]]></remarks>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldNotBeSelectedAsync(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element is not selected.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks><![CDATA[Elements: <option>]]></remarks>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldBeCheckedAsync(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element is checked.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks><![CDATA[Elements: <command>, <input>]]></remarks>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldNotBeCheckedAsync(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element is not checked.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks><![CDATA[Elements: <command>, <input>]]></remarks>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldBeDisabledAsync(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element is disabled.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks><![CDATA[Elements: <button>, <command>, <fieldset>, <input>, <keygen>, <optgroup>, <option>, <select>, <textarea>]]></remarks>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldBeEnabledAsync(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element is enabled.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks><![CDATA[Elements: <button>, <command>, <fieldset>, <input>, <keygen>, <optgroup>, <option>, <select>, <textarea>]]></remarks>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldBeReadOnlyAsync(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element is read-only.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks><![CDATA[Elements: <input>, <textarea>]]></remarks>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldNotBeReadOnlyAsync(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element is not read-only.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks><![CDATA[Elements: <input>, <textarea>]]></remarks>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldBeRequiredAsync(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element is required.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks><![CDATA[Elements: <input>, <select>, <textarea>]]></remarks>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldNotBeRequiredAsync(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element is not required.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks><![CDATA[Elements: <input>, <select>, <textarea>]]></remarks>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldHaveFocusAsync(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element has focus.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks><![CDATA[Elements: <button>, <input>, <keygen>, <select>, <textarea>]]></remarks>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ElementHandleShouldExtensions.ShouldNotHaveFocusAsync(PuppeteerSharp.ElementHandle,System.String)">
            <summary>
            Asserts that the element does not have focus.
            </summary>
            <param name="elementHandle">An <see cref="T:PuppeteerSharp.ElementHandle"/></param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks><![CDATA[Elements: <button>, <input>, <keygen>, <select>, <textarea>]]></remarks>
        </member>
        <member name="T:PuppeteerSharp.Contrib.Should.PageShouldExtensions">
            <summary>
            Should assertions for <see cref="T:PuppeteerSharp.Page"/>.
            </summary>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.PageShouldExtensions.ShouldHaveContentAsync(PuppeteerSharp.Page,System.String,System.String,System.String)">
            <summary>
            Asserts that the page has the specified content.
            </summary>
            <param name="page">A <see cref="T:PuppeteerSharp.Page"/></param>
            <param name="regex">A regular expression to test against <c>document.documentElement.textContent</c></param>
            <param name="flags">A set of flags for the regular expression</param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"/>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.PageShouldExtensions.ShouldNotHaveContentAsync(PuppeteerSharp.Page,System.String,System.String,System.String)">
            <summary>
            Asserts that the page does not have the specified content.
            </summary>
            <param name="page">A <see cref="T:PuppeteerSharp.Page"/></param>
            <param name="regex">A regular expression to test against <c>document.documentElement.textContent</c></param>
            <param name="flags">A set of flags for the regular expression</param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"/>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.PageShouldExtensions.ShouldHaveTitleAsync(PuppeteerSharp.Page,System.String,System.String,System.String)">
            <summary>
            Asserts that the page has the specified title.
            </summary>
            <param name="page">A <see cref="T:PuppeteerSharp.Page"/></param>
            <param name="regex">A regular expression to test against <c>document.title</c></param>
            <param name="flags">A set of flags for the regular expression</param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"/>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.PageShouldExtensions.ShouldNotHaveTitleAsync(PuppeteerSharp.Page,System.String,System.String,System.String)">
            <summary>
            Asserts that the page does not have the specified title.
            </summary>
            <param name="page">A <see cref="T:PuppeteerSharp.Page"/></param>
            <param name="regex">A regular expression to test against <c>document.title</c></param>
            <param name="flags">A set of flags for the regular expression</param>
            <param name="because">A phrase explaining why the assertion is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"/>
        </member>
        <member name="T:PuppeteerSharp.Contrib.Should.ShouldException">
            <summary>
            Exception thrown when a should assertion fails.
            </summary>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ShouldException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PuppeteerSharp.Contrib.Should.ShouldException"/> class.
            </summary>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ShouldException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PuppeteerSharp.Contrib.Should.ShouldException"/> class.
            </summary>
            <param name="message">A failure message</param>
        </member>
        <member name="M:PuppeteerSharp.Contrib.Should.ShouldException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PuppeteerSharp.Contrib.Should.ShouldException"/> class.
            </summary>
            <param name="message">A failure message</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
    </members>
</doc>
